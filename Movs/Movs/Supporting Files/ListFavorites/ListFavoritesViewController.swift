//
//  ListFavoritesViewController.swift
//  Movs
//
//  Created by Lucas Ferraço on 19/09/18.
//  Copyright (c) 2018 Lucas Ferraço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListFavoritesDisplayLogic: class {
	func displayFavoriteList(with viewModel: ListFavorites.GetFavorites.ViewModel)
}

class ListFavoritesViewController: UIViewController, ListFavoritesDisplayLogic {
	var interactor: ListFavoritesBusinessLogic?
	var router: (NSObjectProtocol & ListFavoritesRoutingLogic & ListFavoritesDataPassing)?
	
	fileprivate var collectionManager: FavoriteCollectionManager!
	@IBOutlet weak var favoritesCollectionView: UICollectionView!
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		let viewController = self
		let interactor = ListFavoritesInteractor()
		let presenter = ListFavoritesPresenter()
		let router = ListFavoritesRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		
		setupMoviesCollection()
		interactor?.getFavorites()
	}
	
	// MARK: Display Favorites
	
	func displayFavoriteList(with viewModel: ListFavorites.GetFavorites.ViewModel) {
		if viewModel.isSuccess, let moviesInfo = viewModel.moviesInfo {
			collectionManager.display(movies: moviesInfo)
		} else if let message = viewModel.errorMessage {
			let alert = UIAlertController(title: "Ops", message: message, preferredStyle: .alert)
			alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
			
			self.present(alert, animated: true, completion: nil)
		}
	}
	
	//MARK:- Auxiliary Methods
	
	fileprivate func setupMoviesCollection() {
		favoritesCollectionView.contentInset = UIEdgeInsets(top: 5, left: 5, bottom: 10, right: 5)
		favoritesCollectionView.alwaysBounceVertical = true
		
		setupMoviewCollectionManager()
	}
	
	fileprivate func setupMoviewCollectionManager() {
		collectionManager = FavoriteCollectionManager(of: favoritesCollectionView)
		collectionManager.delegate = self
		
		favoritesCollectionView.dataSource = collectionManager
		favoritesCollectionView.delegate = collectionManager
	}
}

extension ListFavoritesViewController: FavoriteCollectionManagerProtocol {
	func didFavoritedMovie(withId id: Int) {
		
	}
}

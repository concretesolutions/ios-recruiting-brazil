//
//  FavoritesInteractor.swift
//  concreto-filmes
//
//  Created by Leonel Menezes on 31/10/18.
//  Copyright (c) 2018 Leonel Menezes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol FavoritesBusinessLogic {
    func presentMovies(shouldFiter: Bool)
    func deleteMovie(at index: Int, filter: Bool)
    func filterMoviesLocally(text: String, isFiltering: Bool)
}

protocol FavoritesDataStore {
    var movies: [Movie] { get set }
    var filteredMovies: [Movie] { get set }
    var genreFilter: String { get set }
    var yearFilter: String { get set }
}

class FavoritesInteractor: FavoritesBusinessLogic, FavoritesDataStore {
    var presenter: FavoritesPresentationLogic?
    var realm = RealmService.shared.realm
    var movies: [Movie] = []
    var filteredMovies: [Movie] = []
    var genreFilter: String = ""
    var yearFilter: String = ""
    
    func presentMovies(shouldFiter: Bool) {
        if let realmMovies: Results<MovieRealm> = realm?.objects(MovieRealm.self) {
            
            //Here I update the movies array with the realm persistance
            self.movies = Array(realmMovies).map({ (movieRealm) -> Movie in
                return Movie(movie: movieRealm)
            })
            //Then I update de filtered movies too
            removeDeletedItemsFromFilteredMovies(consider: Array(realmMovies))
            
            //Here I check if it is filtering to show the right array of movies
            if shouldFiter {
                filterMoviesLocally(text: "", isFiltering: true)
                presenter?.present(movies: self.filteredMovies)
            } else {
                presenter?.present(movies: self.movies)
            }
        }
    }
    
    func deleteMovie(at index: Int, filter: Bool) {
        let movie = filter ? filteredMovies[index] : movies[index]
        if let realmMovie = self.realm?.object(ofType: MovieRealm.self, forPrimaryKey: movie.id) {
            self.movies = self.movies.filter({ (movie) -> Bool in
                return movie.id != realmMovie.id
            })
            self.filteredMovies = self.filteredMovies.filter({ (movie) -> Bool in
                return movie.id != realmMovie.id
            })
            RealmService.shared.delete(realmMovie)
        }
    }
    
    func filterMoviesLocally(text: String, isFiltering: Bool) {
        if !isFiltering && text != "" {
            self.presenter?.present(movies: self.movies)
            return
        }
        if text != "" {
            self.filteredMovies = movies.filter({ (movie) -> Bool in
                return movie.title.lowercased().contains(text.lowercased())
            })
        } else {
            self.filteredMovies = self.movies
        }

        if self.genreFilter != "" {
            self.filteredMovies = self.filteredMovies.filter({ (movie) -> Bool in
                return movie.genres.contains(self.genreFilter)
            })
        }
        
        if self.yearFilter != ""{
            self.filteredMovies = self.filteredMovies.filter({ (movie) -> Bool in
                return movie.yearString() == self.yearFilter
            })
        }
        
        self.presenter?.present(movies: self.filteredMovies)
    }
    
    func removeDeletedItemsFromFilteredMovies(consider realmArray: [MovieRealm]) {
        for movie in self.filteredMovies {
            if realmArray.first(where: { (movieRealm) -> Bool in
                return movieRealm.id == movie.id
            }) == nil {
                self.filteredMovies = self.filteredMovies.filter({ (movieIterator) -> Bool in
                    return movie.id != movieIterator.id
                })
            }
        }
    }
    
}

//
//  MainScreenViewController.swift
//  concreto-filmes
//
//  Created by Leonel Menezes on 23/10/18.
//  Copyright (c) 2018 Leonel Menezes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Keys
import SnapKit

protocol MainScreenDisplayLogic: class
{
    func displaySomething(viewModel: MainScreen.Something.ViewModel)
    func display(movies: [MainScreen.FetchPopularMuvies.ViewModel.MovieViewModel])
}

class MainScreenViewController: UICollectionViewController, MainScreenDisplayLogic
{
    var interactor: MainScreenBusinessLogic?
    var router: (NSObjectProtocol & MainScreenRoutingLogic & MainScreenDataPassing)?
    
    let movieCellID = "movieCellID"
    var displayedMovies : [MainScreen.FetchPopularMuvies.ViewModel.MovieViewModel] = []
    
    private let leftBarButton : UIBarButtonItem = {
        let btn = UIBarButtonItem()
        btn.image = #imageLiteral(resourceName: "MOV")
        btn.tintColor = .black
        return btn
    }()
    
    private let searchBar : UISearchBar = {
        let searchBar = UISearchBar()
        searchBar.layer.borderColor = UIColor.gray.cgColor
        searchBar.placeholder = "Search"
        return searchBar
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        collectionView.reloadData()
        // Do any additional setup after loading the view, typically from a nib.
        interactor?.fetchPopularMovies(request: MainScreen.FetchPopularMuvies.Request(index: 1))
    }
    
    // MARK: Object lifecycle
    
    override init(collectionViewLayout layout: UICollectionViewLayout) {
        super.init(collectionViewLayout: layout)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        return nil
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MainScreenInteractor()
        let presenter = MainScreenPresenter()
        let router = MainScreenRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = MainScreen.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: MainScreen.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func display(movies: [MainScreen.FetchPopularMuvies.ViewModel.MovieViewModel]) {
        self.displayedMovies = movies
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
    
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedMovies.count
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: self.movieCellID, for: indexPath) as! MainScreenMovieCell
        let item = displayedMovies[indexPath.item]
        let data = MainScreen.FetchPopularMuvies.ViewModel.MovieViewModel(posterUrl: item.posterUrl, title: item.title)
        cell.setData(data: data)
        return cell
    }
}


extension MainScreenViewController: CodeView {
    func buildViewHierarchy() {
        navigationItem.leftBarButtonItem = leftBarButton
        navigationItem.titleView = searchBar
        
    }
    
    func setupConstraints() {
    }
    
    func setupAdditionalConfiguration() {
        self.navigationController?.hidesBarsOnSwipe = true
        self.navigationController?.navigationBar.barTintColor = AppColors.mainYellow.color
        collectionView.register(MainScreenMovieCell.self, forCellWithReuseIdentifier: self.movieCellID)
    }
}


extension MainScreenViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: view.frame.width/2.2, height: view.frame.width/1.5)
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 10, left: 5, bottom: 5, right: 10)
    }
}

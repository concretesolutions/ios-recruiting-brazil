//
//  MainScreenViewController.swift
//  concreto-filmes
//
//  Created by Leonel Menezes on 23/10/18.
//  Copyright (c) 2018 Leonel Menezes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Keys
import SnapKit

enum AppStatus{
    case firstFetch
    case fetchingMore
    case finish
}

protocol MainScreenDisplayLogic: class
{
    func display(movies: [MainScreen.ViewModel.MovieViewModel])
    func displayAlert(title: String,  message: String)
}

class MainScreenViewController: UICollectionViewController, MainScreenDisplayLogic
{
    var interactor: MainScreenBusinessLogic?
    var router: (NSObjectProtocol & MainScreenRoutingLogic & MainScreenDataPassing)?
    
    let movieCellID = "movieCellID"
    var displayedMovies : [MainScreen.ViewModel.MovieViewModel] = []
    var currentPageForAPI = 1
    internal var isFiltering = false
    
    var applicationStatus : AppStatus = .firstFetch
    
    private let leftBarButton : UIBarButtonItem = {
        let btn = UIBarButtonItem()
        btn.image = #imageLiteral(resourceName: "MOV")
        btn.tintColor = .black
        return btn
    }()
    
    lazy var searchBar : UISearchBar = {
        let searchBar = UISearchBar()
        searchBar.layer.borderColor = UIColor.gray.cgColor
        searchBar.placeholder = "Search"
        searchBar.delegate = self
        return searchBar
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        collectionView.reloadData()
        interactor?.fetchPopularMovies(request:  MainScreen.FetchPopularMovies.Request(index: self.currentPageForAPI), isFirstRequest: true, completionBlock: {
            self.applicationStatus = .finish
        })
    }
    
    // MARK: Object lifecycle
    
    override init(collectionViewLayout layout: UICollectionViewLayout) {
        super.init(collectionViewLayout: layout)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        return nil
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MainScreenInteractor()
        let presenter = MainScreenPresenter()
        let router = MainScreenRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    func display(movies: [MainScreen.ViewModel.MovieViewModel]) {
        self.displayedMovies = movies
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
    
    func displayAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Tentar novamente", style: .default, handler: { (action) in
            self.interactor?.fetchPopularMovies(request: MainScreen.FetchPopularMovies.Request(index: self.currentPageForAPI), isFirstRequest: self.applicationStatus == .firstFetch, completionBlock: {
                alert.dismiss(animated: true, completion: {
                    self.applicationStatus = .finish
                })
            })
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    //MARK: - Scroll View
    
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        
        if(offsetY > contentHeight - scrollView.frame.height && applicationStatus != .fetchingMore && applicationStatus != .firstFetch){
            beginBatchFetch()
        }
    }
    
    func beginBatchFetch() {
        self.applicationStatus = .fetchingMore
        self.currentPageForAPI += 1
        if(isFiltering){
            interactor?.fetchQueriedMovies(request: MainScreen.FetchQueryMovies.Request(index: self.currentPageForAPI, text: self.searchBar.text ?? ""), isFirstRequest: false, completionBlock: {
                self.applicationStatus = .finish
            })
        }else {
            interactor?.fetchPopularMovies(request: MainScreen.FetchPopularMovies.Request(index: self.currentPageForAPI), isFirstRequest: false, completionBlock: {
                self.applicationStatus = .finish
            })
        }
    }
}


extension MainScreenViewController: CodeView {
    func buildViewHierarchy() {
        navigationItem.leftBarButtonItem = leftBarButton
        navigationItem.titleView = searchBar
        
    }
    
    func setupConstraints() {
    }
    
    func setupAdditionalConfiguration() {
        self.navigationController?.hidesBarsOnSwipe = true
        self.navigationController?.navigationBar.barTintColor = AppColors.mainYellow.color
        collectionView.register(MainScreenMovieCell.self, forCellWithReuseIdentifier: self.movieCellID)
        let tapToDismiss = UITapGestureRecognizer(target: self, action: #selector(UIInputViewController.dismissKeyboard))
        view.addGestureRecognizer(tapToDismiss)
    }
}

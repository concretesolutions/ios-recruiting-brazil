//
//  FilterViewController.swift
//  concreto-filmes
//
//  Created by Leonel Menezes on 01/11/18.
//  Copyright (c) 2018 Leonel Menezes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol FilterDisplayLogic: class {
    func displaySomething(viewModel: Filter.Something.ViewModel)
    func display(years: [String], genres: [String])
}

final class FilterViewController: UIViewController, FilterDisplayLogic {
    var interactor: FilterBusinessLogic?
    var router: (NSObjectProtocol & FilterRoutingLogic & FilterDataPassing)?
    
    var genres: [String] = ["Terror", "Aventura"]
    var years: [String] = ["2008", "2030"]
    
    var selectedGenreValue = ""
    var selectedYearValue = ""
    
    lazy var genresPickerView: UIPickerView = {
        let pickerView = UIPickerView()
        pickerView.tag = 1
        pickerView.delegate = self
        pickerView.dataSource = self
        return pickerView
    }()
    
    lazy var yearsPickerView: UIPickerView = {
        let pickerView = UIPickerView()
        pickerView.tag = 2
        pickerView.delegate = self
        pickerView.dataSource = self
        return pickerView
    }()
    
    let genresLabel: UILabel = {
        let label = UILabel()
        label.textColor = .white
        label.text = "Gêneros:"
        label.font = UIFont.systemFont(ofSize: 16, weight: UIFont.Weight(rawValue: 16))
        return label
    }()
    
    let yearsLabel: UILabel = {
        let label = UILabel()
        label.text = "Lançamento:"
        label.textColor = .white
        label.font = UIFont.systemFont(ofSize: 16, weight: UIFont.Weight(rawValue: 16))
        return label
    }()
    
    let applyFilterButton: UIButton = {
        let button = UIButton()
        button.addTarget(self, action: #selector(applyFilters), for: .touchUpInside)
        button.backgroundColor = AppColors.mainYellow.color
        button.setTitle("Aplicar", for: .normal)
        button.setTitleColor(.black, for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: UIFont.Weight(rawValue: 20))
        button.layer.cornerRadius = 20
        return button
    }()
    
    let leaveButton: UIButton = {
        let button = UIButton()
        button.addTarget(self, action: #selector(dismissSelf), for: .touchUpInside)
        button.setImage(#imageLiteral(resourceName: "arrow-down"), for: .normal)
        button.tintColor = .white
        return button
    }()
    
    // MARK: Object lifecycle
    
    init() {
        super.init(nibName: nil, bundle: nil)
        self.hidesBottomBarWhenPushed = true
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = FilterInteractor()
        let presenter = FilterPresenter()
        let router = FilterRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        interactor?.fetchYearsAndGenres()
    }
    
    override var prefersStatusBarHidden: Bool {
        return true
    }
    
    func displaySomething(viewModel: Filter.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    
    func display(years: [String], genres: [String]) {
        self.years = years
        self.genres = genres
        self.yearsPickerView.reloadAllComponents()
        self.genresPickerView.reloadAllComponents()
    }
    
    @objc func applyFilters() {
        router?.routeBackWithFilters()
    }
    
    @objc func dismissSelf() {
        self.dismiss(animated: true, completion: nil)
    }
}

extension FilterViewController: CodeView {
    func buildViewHierarchy() {
        view.addSubview(self.genresPickerView)
        view.addSubview(self.yearsPickerView)
        view.addSubview(self.genresLabel)
        view.addSubview(self.yearsLabel)
        view.addSubview(self.applyFilterButton)
        view.addSubview(self.leaveButton)
    }
    
    func setupConstraints() {
        self.genresPickerView.snp.makeConstraints { (maker) in
            maker.width.equalTo(self.view.frame.width/2)
            maker.centerY.equalTo(self.view)
            maker.left.equalTo(self.view.snp.left)
            maker.height.equalTo(200)
        }
        self.yearsPickerView.snp.makeConstraints { (maker) in
            maker.width.equalTo(self.view.frame.width/2)
            maker.centerY.equalTo(self.view)
            maker.right.equalTo(self.view.snp.right)
            maker.height.equalTo(200)
        }
        
        self.genresLabel.snp.makeConstraints { (maker) in
            maker.centerX.equalTo(self.genresPickerView)
            maker.bottom.equalTo(self.genresPickerView.snp.top).inset(20)
        }
        
        self.yearsLabel.snp.makeConstraints { (maker) in
            maker.centerX.equalTo(self.yearsPickerView)
            maker.bottom.equalTo(self.yearsPickerView.snp.top).inset(20)
        }
        
        self.applyFilterButton.snp.makeConstraints { (maker) in
            maker.width.equalTo(self.view.frame.width * 0.8)
            maker.height.equalTo(50)
            maker.top.equalTo(self.genresPickerView.snp.bottom).offset(50)
            maker.centerX.equalTo(self.view)
        }
        
        self.leaveButton.snp.makeConstraints { (maker) in
            maker.width.equalTo(25)
            maker.height.equalTo(25)
            maker.top.equalTo(self.view.snp.top).offset(20)
            maker.left.equalTo(self.view).offset(20)
        }
    }
    
    func setupAdditionalConfiguration() {
        self.view.backgroundColor = .black
        self.navigationController?.navigationBar.tintColor = .black
    }
    
}

extension FilterViewController: UIPickerViewDataSource, UIPickerViewDelegate {
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        if pickerView.tag == 1 {
            return genres.count + 1
        }
        return years.count + 1
    }
    
    func pickerView(_ pickerView: UIPickerView, attributedTitleForRow row: Int, forComponent component: Int) -> NSAttributedString? {
        var string: String
        if row == 0 {
            string = "Nenhum"
        } else if pickerView.tag == 1 {
            string = genres[row - 1]
        } else {
            string = years[row - 1]
        }
        
        return NSAttributedString(string: string, attributes: [NSAttributedString.Key.foregroundColor: UIColor.white])
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        if pickerView.tag == 1 {
            self.selectedGenreValue = row == 0 ? "" : self.genres[row - 1]
        } else {
            self.selectedYearValue = row == 0 ? "" : self.years[row - 1]
        }
        
        interactor?.setSelected(year: self.selectedYearValue, genre: self.selectedGenreValue)
    }
}
